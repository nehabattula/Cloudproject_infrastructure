Description: The template deploys VPC, with 3 public subnets spreading 
  across 3 Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. 

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev_env
  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  DestinationRouteCIDR:
    Description: Destination CIDR for Route
    Type: String
    Default: 0.0.0.0/0
  ImageAMIId:
    Description: AMI Id
    Type: String
    Default: ""
  SSHKey:
    Description: SSH Key
    Type: String
    Default: "csye6225test"
  VolumeSizeValue:
    Description: Size
    Type: String
    Default: ""
  DBInstanceID:
    Description: My database instance
    Type: String
    Default: "csye6225"
  DBName:
    Default: csye6225
    Description: My database
    Type: String
  DBUsername:
    NoEcho: "true"
    Description: Username for postgresql database access
    Type: String
  DBPassword:
    NoEcho: "true"
    Description: Password for postgresql database access
    Type: String
  RootDomainName:
    Description: Domain Name of prod account
    Type: String
    Default: prod.nehabattula.me
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationRouteCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  application:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "App security group description"
      GroupName: "Application group Name"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          FromPort: 3002
          ToPort: 3002
          SourceSecurityGroupId: !GetAtt loadbalancer.GroupId

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 6, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: description
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  database:
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DatabaseSG
      GroupDescription: "Database Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !GetAtt application.GroupId

  S3Bucket:
    Type: AWS::S3::Bucket
    Description: Creating Amazon S3 bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - !Ref RootDomainName

      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for transition from Standard storage to Standard_IA
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled

  RDSParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: CloudFormation Postgres Parameter Group
      Family: postgres13

  MyDBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: postgres
      DBInstanceClass: "db.t3.micro"
      MultiAZ: false
      DBInstanceIdentifier: !Ref DBInstanceID
      MasterUsername: csye
      MasterUserPassword: Nevika.1996
      DBSubnetGroupName: !Ref myDBSubnetGroup
      PubliclyAccessible: false
      DBName: csye6225
      VPCSecurityGroups: [!Ref database]
      DBParameterGroupName: !Ref RDSParameterGroup
      AllocatedStorage: "50"

  EC2CSYE6225:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "EC2CSYE6225"

  WebAppS3:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "myWebAppS3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource:
              - !Join [":::", ["arn:aws:s3", !Ref S3Bucket]]
              - !Join ["/", [!Join [":::", ["arn:aws:s3", !Ref S3Bucket]], "*"]]
      Roles:
        - Ref: "EC2CSYE6225"

  loadbalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSG
      GroupDescription: "Load Balancer Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
        - !Ref EC2TargetGroupLB
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Cooldown: "60"
      MinSize: "3"
      MaxSize: "5"
      DesiredCapacity: "3"
      LaunchConfigurationName: !Ref asglaunchconfig
      Tags:
        - Key: "Name"
          PropagateAtLaunch: true
          Value: "EC2AutoScalingGroup"

  asglaunchconfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref ImageAMIId
      InstanceType: t2.micro
      KeyName: !Ref SSHKey
      BlockDeviceMappings:
        - DeviceName: "/dev/sdm"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "20"
      LaunchConfigurationName: AutoScalingLaunchConfig
      SecurityGroups:
        - !GetAtt "application.GroupId"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cat > /etc/environment << 'EOF'
            export DB_USERNAME="csye"
            export DB_PASSWORD="Nevika.1996"
            export DB_NAME="csye6225"
            export DB_CONNECTION=${MyDBInstance.Endpoint.Address}
            export S3_BUCKET_NAME="${S3Bucket}
          EOF
          source /etc/profile
          cd /home/ec2-user/webservice
          rm -rf node_modules
          sudo npm i
          sudo systemctl enable myapp
          sudo systemctl start myapp
          sleep 20
          sudo pm2 reload all --update-env

  UpScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScalingGroup
      ScalingAdjustment: 1

  DownScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScalingGroup
      ScalingAdjustment: -1

  CPUUsageHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger CPU alarm if threshold > 3
      AlarmName: CPU Alarm High
      AlarmActions:
        - !Ref UpScalingPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "3"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScalingGroup

  CPUUsageLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger CPU alarm if threshold is < 2
      AlarmName: CPU Alarm Low
      AlarmActions:
        - !Ref DownScalingPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "2"
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScalingGroup

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      IpAddressType: ipv4
      Name: "myLoadBalancer"
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !GetAtt loadbalancer.GroupId
      Type: application

  EC2TargetGroupLB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthz
      HealthCheckPort: 3002
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Name: AppTargetGroup1
      Port: 3002
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance

  EC2LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroupLB
      Port: 80
      Protocol: HTTP

  applicationDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: prod.nehabattula.me.
      RecordSets:
        - Name: prod.nehabattula.me.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt "MyLoadBalancer.CanonicalHostedZoneID"
            DNSName: !GetAtt "MyLoadBalancer.DNSName"
