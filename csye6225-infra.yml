Description:  This template deploys a VPC, with 3 public subnets spreading
  across three Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev_env

  DBInstanceIden:
    Type: String
    Default: "csye6225"

  DBUsername:
    NoEcho: "true"
    Description: Username for Postgresql database access
    Type: String
    Default: "postgres"
  
  # SecretKey:
  #   Description: AWS Secret access key
  #   Type: String
  
  # AccessKey:
  #   Description: AWS Access key
  #   Type: String

  DBPassword:
    NoEcho: "true"
    Description: Password Postgresql database access
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  DestinationRouteCIDR: 
    Description: Destination CIDR for Route
    Type: String
    Default: 0.0.0.0/0

  
  ImageAMIId: 
    Description: Image ID of the newly formed AMI through packer
    Type: String
    Default: 0.0.0.0/0
  
  InstanceName: 
    Description: Name of the EC2 instance
    Type: String
    Default: t2.micro

  SSHKey: 
    Description: SSH key set up for the AWS account
    Type: String
    Default: csye6225test


  VolumeTypeValue: 
    Description: Volume type for EC2 instance
    Type: String
    Default: gp2

  VolumeSizeValue: 
    Description: Volume Size of the EC2 instance
    Type: String
    Default: 20 

  SecurityGroupName:
    Description: Security Group Name
    Type: String  
    Default: ""

  SecurityGroupDescription:
    Description: Security Group Description
    Type: String
    Default: ""
  
  RootDomainName:
    Description: S3 bucket name
    Type: String
    Default: dev.domain.tld
 

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
           
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationRouteCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  application :  
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Group Description"
      GroupName: "Security Group"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3002
          ToPort: 3002  
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      
      VpcId: !Ref VPC
    
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: false

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: false

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet3

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: subnetgroupdescription
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  database: 
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: DBSecurityGroup
      GroupDescription: 'Postgres DB security group'
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !GetAtt application.GroupId

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - !Ref RootDomainName
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: Rule for transition from Standard storage to Standard_IA
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres13
      Description: Configuration values for postgres

  DBinstance: 
    Type: AWS::RDS::DBInstance
    Properties: 
      VPCSecurityGroups: [!Ref database]
      AllocatedStorage: "30"
      DBInstanceIdentifier: !Ref DBInstanceIden
      DBInstanceClass: "db.t3.micro"
      Engine: postgres
      MultiAZ: false
      MasterUsername: csye
      MasterUserPassword: Nevika.1996
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      DBName: csye6225
      DBParameterGroupName: !Ref RDSParameterGroup

  EC2CSYE6225:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      #RoleName: EC2-CSYE6225

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2CSYE6225

  WebAppS3:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "WebAppS3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource:
            - !Join [":::",["arn:aws:s3", !Ref S3Bucket]]
            - !Join ["/", [!Join [":::",["arn:aws:s3", !Ref S3Bucket]],"*"]]
                   
      Roles:
        - !Ref EC2CSYE6225

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: t2.micro
      ImageId: !Ref ImageAMIId
      DisableApiTermination: false
      KeyName: !Ref SSHKey
      SecurityGroupIds : 
      - !GetAtt "application.GroupId"
      SubnetId : !Ref PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: "/dev/sdm"
          Ebs: 
            VolumeType: !Ref VolumeTypeValue
            DeleteOnTermination: "true"
            VolumeSize: !Ref VolumeSizeValue
      IamInstanceProfile: !Ref EC2InstanceProfile

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            cat > /etc/environment << 'EOF'
              export DB_USERNAME=csye
              export DB_PASSWORD=Nevika.1996
              export DB_NAME=csye6225
              export DB_CONNECTION=${DBinstance.Endpoint.Address}
              export S3_BUCKET_NAME=${S3Bucket}
            EOF
            source /etc/profile
            source /etc/environment
            cd /home/ec2-user/webservice
            rm -rf node_modules
            sudo npm i
            sudo systemctl enable myapp
            sudo systemctl start myapp
            sleep 20
            sudo pm2 reload all --update-env

  
  

 
  

  
      
  
  
  

  

  
     
  

  

  

  

