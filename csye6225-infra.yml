Description:  This template deploys a VPC, with 3 public subnets spread
  across three Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev_env

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  DestinationRouteCIDR: 
    Description: Destination CIDR for Route
    Type: String
    Default: 0.0.0.0/0

  
  ImageAMIId: 
    Description: Image ID of the newly formed AMI through packer
    Type: String
    Default: 0.0.0.0/0
  
  InstanceName: 
    Description: Name of the EC2 instance
    Type: String
    Default: t2.micro

  SSHKey: 
    Description: SSH key set up for the AWS account
    Type: String
    Default: csye6225test


  VolumeTypeValue: 
    Description: Volume type for EC2 instance
    Type: String
    Default: gp2

  VolumeSizeValue: 
    Description: Volume Size of the EC2 instance
    Type: String
    Default: 20 


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 3, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationRouteCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  application :  
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: String
      GroupName: String
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 3001
          ToPort: 3001  
      VpcId: !Ref VPC
    
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: !Ref InstanceName
      ImageId: !Ref ImageAMIId
      DisableApiTermination: false
      KeyName: !Ref SSHKey
      SecurityGroupIds : 
      - !GetAtt "application.GroupId"
      SubnetId : !Ref PublicSubnet1
      BlockDeviceMappings:
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: !Ref VolumeTypeValue
          DeleteOnTermination: "true"
          VolumeSize: !Ref VolumeSizeValue

  application :  
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: String
      GroupName: String
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 3001
          ToPort: 3001  
      VpcId: !Ref VPC
